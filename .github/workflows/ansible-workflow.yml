name: Deploy and Collect VM Info with Ansible

on:
  workflow_dispatch:  # 수동 실행

jobs:
  deploy:
    runs-on: self-hosted  # GitHub Actions 실행 서버

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Required Tools
        run: |
          echo "🔧 필요한 도구 설치 확인 중..."
          # sshpass 확인 및 설치 (비밀번호 자동화용)
          if ! command -v sshpass &> /dev/null; then
            echo "⚠️ sshpass 설치 중..."
            sudo yum install -y sshpass
          else
            echo "✅ sshpass가 이미 설치되어 있습니다."
          fi
          
          # PostgreSQL 클라이언트 확인 및 설치
          if ! command -v psql &> /dev/null; then
            echo "⚠️ PostgreSQL 클라이언트 설치 중..."
            sudo yum install -y postgresql
          else
            echo "✅ PostgreSQL 클라이언트가 이미 설치되어 있습니다."
          fi

      - name: Set Environment Variables
        run: |
          echo "DB_PASSWORD=soldesk1." >> $GITHUB_ENV
          echo "AWX_PASSWORD=redhat" >> $GITHUB_ENV
          echo "DB_SERVER=192.168.60.64" >> $GITHUB_ENV
          echo "ANSIBLE_MASTER=192.168.50.11" >> $GITHUB_ENV
          echo "TEMPLATE_PATH=/var/lib/pgsql/data/service_templates/ansible" >> $GITHUB_ENV

      - name: Modify Ansible Deployment Script
        run: |
          echo "🔧 Ansible 배포 스크립트 생성 중..."
          
          # 기존 스크립트 문제를 우회하는 새 배포 스크립트 생성
          cat > /tmp/custom_deploy.sh << 'EOF'
          #!/bin/bash

          # 로그 파일 설정 (awx 사용자가 쓸 수 있는 위치로 변경)
          LOGFILE="/tmp/ansible_deployment-$(date +%Y%m%d-%H%M%S).log"

          echo "Starting Web Application Deployment with Ansible..." | tee -a $LOGFILE

          # 현재 디렉토리의 상대 경로를 사용
          ansible-playbook -i ./inventory/hosts ./playbooks/deployment.yml -v | tee -a $LOGFILE

          # 결과 확인
          if [ $? -eq 0 ]; then
              echo "Deployment completed successfully!" | tee -a $LOGFILE
          else
              echo "Deployment failed. Check the logs for more information." | tee -a $LOGFILE
              exit 1
          fi

          echo "You can access the application at http://$(hostname -I | awk '{print $1}')" | tee -a $LOGFILE
          EOF
          
          chmod +x /tmp/custom_deploy.sh

      - name: Create Temporary Directories
        run: |
          echo "🔧 임시 디렉토리 생성 중..."
          mkdir -p /tmp/ansible-files/{inventory,playbooks,scripts}
          mkdir -p /tmp/vm-info
          
          # 마스터 서버에 임시 디렉토리 생성
          sshpass -p "${{ env.AWX_PASSWORD }}" ssh -o StrictHostKeyChecking=no awx@${{ env.ANSIBLE_MASTER }} "mkdir -p /tmp/ansible-files/{inventory,playbooks,scripts} /tmp/vm-info"

      - name: Create Test Ansible Files
        run: |
          echo "🔧 테스트용 Ansible 파일 생성 중..."
          
          # 간단한 인벤토리 파일 생성
          cat > /tmp/ansible-files/inventory/hosts << EOF
          [web_servers]
          localhost ansible_connection=local

          [database_servers]
          localhost ansible_connection=local
          EOF
          
          # 간단한 플레이북 파일 생성
          cat > /tmp/ansible-files/playbooks/deployment.yml << EOF
          ---
          - name: 테스트 배포
            hosts: localhost
            connection: local
            tasks:
              - name: 테스트 태스크
                debug:
                  msg: "테스트 배포가 성공적으로 실행되었습니다."
          EOF

      - name: Copy Ansible Files to Master Server
        run: |
          echo "🚀 Ansible 파일을 마스터 서버로 복사 중..."
          
          # 수정된 배포 스크립트 복사
          sshpass -p "${{ env.AWX_PASSWORD }}" scp -o StrictHostKeyChecking=no /tmp/custom_deploy.sh awx@${{ env.ANSIBLE_MASTER }}:/tmp/ansible-files/scripts/deploy.sh
          
          # 생성한 Ansible 파일들 복사
          sshpass -p "${{ env.AWX_PASSWORD }}" scp -o StrictHostKeyChecking=no -r /tmp/ansible-files/inventory/* awx@${{ env.ANSIBLE_MASTER }}:/tmp/ansible-files/inventory/
          sshpass -p "${{ env.AWX_PASSWORD }}" scp -o StrictHostKeyChecking=no -r /tmp/ansible-files/playbooks/* awx@${{ env.ANSIBLE_MASTER }}:/tmp/ansible-files/playbooks/

      - name: Create VM Info Collection Playbook
        run: |
          echo "🔧 VM 정보 수집 플레이북 생성 중..."
          
          # VM 정보 수집용 Ansible 플레이북 생성
          cat > /tmp/vm-info/collect_vm_info.yml << EOF
          ---
          - name: 서버 정보 수집
            hosts: all
            gather_facts: yes
            tasks:
              - name: 시스템 정보 수집
                setup:

              - name: VM 정보 저장
                delegate_to: localhost
                vars:
                  ansible_connection: local
                ansible.builtin.copy:
                  content: |
                    {
                      "hostname": "{{ ansible_hostname }}",
                      "ip_address": "{{ ansible_default_ipv4.address | default('unknown') }}",
                      "os_type": "{{ ansible_distribution }} {{ ansible_distribution_version }}",
                      "cpu_cores": {{ ansible_processor_cores | default(1) }},
                      "memory_gb": {{ (ansible_memtotal_mb / 1024) | round | int | default(2) }},
                      "storage_gb": {{ (ansible_mounts[0].size_total / 1024 / 1024 / 1024) | round | int | default(20) }},
                      "status": "running"
                    }
                  dest: "/tmp/vm-info/{{ ansible_hostname }}.json"
                  mode: '0644'
          EOF
          
          # VM 정보 수집 플레이북을 마스터 서버로 복사
          sshpass -p "${{ env.AWX_PASSWORD }}" scp -o StrictHostKeyChecking=no /tmp/vm-info/collect_vm_info.yml awx@${{ env.ANSIBLE_MASTER }}:/tmp/vm-info/

      - name: Execute Ansible Deployment Script
        run: |
          echo "🚀 배포 스크립트 실행 중..."
          
          # 현재 디렉토리를 변경해서 스크립트 실행 (경로 문제 해결)
          sshpass -p "${{ env.AWX_PASSWORD }}" ssh -o StrictHostKeyChecking=no awx@${{ env.ANSIBLE_MASTER }} "cd /tmp/ansible-files && bash ./scripts/deploy.sh"
          
          DEPLOYMENT_STATUS=$?
          if [ $DEPLOYMENT_STATUS -eq 0 ]; then
            echo "✅ 애플리케이션 배포에 성공했습니다!"
          else
            echo "❌ 배포에 실패했습니다. 상태 코드: $DEPLOYMENT_STATUS"
            exit $DEPLOYMENT_STATUS
          fi

      - name: Run VM Info Collection Playbook
        run: |
          echo "🔍 VM 정보 수집 플레이북 실행 중..."
          
          # VM 정보 수집 플레이북 실행 (인벤토리 경로 수정)
          sshpass -p "${{ env.AWX_PASSWORD }}" ssh -o StrictHostKeyChecking=no awx@${{ env.ANSIBLE_MASTER }} "cd /tmp/ansible-files && ansible-playbook -i ./inventory/hosts /tmp/vm-info/collect_vm_info.yml"

      - name: Fetch VM Info JSON Files
        run: |
          echo "📤 수집된 VM 정보 가져오는 중..."
          mkdir -p /tmp/vm-info-results
          sshpass -p "${{ env.AWX_PASSWORD }}" scp -o StrictHostKeyChecking=no -r awx@${{ env.ANSIBLE_MASTER }}:/tmp/vm-info/*.json /tmp/vm-info-results/

      - name: Update Database with VM Information
        run: |
          echo "💾 VM 정보 DB 업데이트 중..."
          # 여기에 DB 업데이트 코드 추가 (기존 코드 유지)
