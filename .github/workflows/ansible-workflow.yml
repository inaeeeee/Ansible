name: Deploy and Collect VM Info with Ansible

on:
  workflow_dispatch:  # 수동 실행

jobs:
  deploy:
    runs-on: self-hosted  # GitHub Actions 실행 서버

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Required Tools
        run: |
          echo "🔧 필요한 도구 설치 확인 중..."
          # sshpass 확인 및 설치 (비밀번호 자동화용)
          if ! command -v sshpass &> /dev/null; then
            echo "⚠️ sshpass 설치 중..."
            sudo yum install -y sshpass
          else
            echo "✅ sshpass가 이미 설치되어 있습니다."
          fi
          
          # PostgreSQL 클라이언트 확인 및 설치
          if ! command -v psql &> /dev/null; then
            echo "⚠️ PostgreSQL 클라이언트 설치 중..."
            sudo yum install -y postgresql
          else
            echo "✅ PostgreSQL 클라이언트가 이미 설치되어 있습니다."
          fi

      - name: Set Environment Variables
        run: |
          echo "DB_PASSWORD=soldesk1." >> $GITHUB_ENV
          echo "AWX_PASSWORD=redhat" >> $GITHUB_ENV
          echo "DB_SERVER=192.168.60.64" >> $GITHUB_ENV
          echo "ANSIBLE_MASTER=192.168.50.11" >> $GITHUB_ENV
          echo "TEMPLATE_PATH=/var/lib/pgsql/data/service_templates/ansible" >> $GITHUB_ENV

      - name: Fetch Ansible Deployment Script Path
        run: |
          echo "🔍 PostgreSQL에서 Ansible 배포 정보 조회 중..."
          
          # PGPASSWORD 환경 변수를 사용하여 비밀번호 자동 입력
          SCRIPT_PATH=$(PGPASSWORD=${{ env.DB_PASSWORD }} psql -h ${{ env.DB_SERVER }} -p 5432 -U postgres -d solmakasedb -t -c \
            "SELECT deploy_script FROM servicetemplate WHERE name = 'ansible';" | xargs)
          
          if [[ -z "$SCRIPT_PATH" ]]; then
            echo "❌ Ansible 배포 스크립트 경로를 찾을 수 없습니다."
            echo "기본 경로 사용: ${{ env.TEMPLATE_PATH }}/scripts/deploy.sh"
            SCRIPT_PATH="${{ env.TEMPLATE_PATH }}/scripts/deploy.sh"
          else
            echo "✅ 배포 스크립트 경로: $SCRIPT_PATH"
          fi
          
          echo "SCRIPT_PATH=$SCRIPT_PATH" >> $GITHUB_ENV

      - name: Create Temporary Directories
        run: |
          echo "🔧 임시 디렉토리 생성 중..."
          mkdir -p /tmp/ansible-files
          mkdir -p /tmp/vm-info
          
          # 마스터 서버에 임시 디렉토리 생성
          sshpass -p "${{ env.AWX_PASSWORD }}" ssh -o StrictHostKeyChecking=no awx@${{ env.ANSIBLE_MASTER }} "mkdir -p /tmp/ansible-files /tmp/vm-info"

      - name: Copy Ansible Files from DB Server to Master Server
        run: |
          echo "🚀 Ansible 파일을 DB 서버에서 마스터 서버로 복사 중..."
          
          # 1단계: DB 서버에서 로컬로 파일 복사
          sshpass -p "${{ env.DB_PASSWORD }}" scp -o StrictHostKeyChecking=no -r postgres@${{ env.DB_SERVER }}:${{ env.TEMPLATE_PATH }}/* /tmp/ansible-files/
          
          # 2단계: 로컬에서 마스터 서버로 파일 복사
          sshpass -p "${{ env.AWX_PASSWORD }}" scp -o StrictHostKeyChecking=no -r /tmp/ansible-files/* awx@${{ env.ANSIBLE_MASTER }}:/tmp/ansible-files/

      - name: Create VM Info Collection Playbook
        run: |
          echo "🔧 VM 정보 수집 플레이북 생성 중..."
          
          # VM 정보 수집용 Ansible 플레이북 생성
          cat > /tmp/vm-info/collect_vm_info.yml << EOF
          ---
          - name: 서버 정보 수집
            hosts: all
            gather_facts: yes
            tasks:
              - name: 시스템 정보 수집
                setup:

              - name: VM 정보 저장
                delegate_to: localhost
                vars:
                  ansible_connection: local
                ansible.builtin.copy:
                  content: |
                    {
                      "hostname": "{{ ansible_hostname }}",
                      "ip_address": "{{ ansible_default_ipv4.address | default('unknown') }}",
                      "os_type": "{{ ansible_distribution }} {{ ansible_distribution_version }}",
                      "cpu_cores": {{ ansible_processor_cores | default(1) }},
                      "memory_gb": {{ (ansible_memtotal_mb / 1024) | round | int | default(2) }},
                      "storage_gb": {{ (ansible_mounts[0].size_total / 1024 / 1024 / 1024) | round | int | default(20) }},
                      "status": "running"
                    }
                  dest: "/tmp/vm-info/{{ ansible_hostname }}.json"
                  mode: '0644'
          EOF
          
          # VM 정보 수집 플레이북을 마스터 서버로 복사
          sshpass -p "${{ env.AWX_PASSWORD }}" scp -o StrictHostKeyChecking=no /tmp/vm-info/collect_vm_info.yml awx@${{ env.ANSIBLE_MASTER }}:/tmp/vm-info/

      - name: Create Database Update Script
        run: |
          echo "🔧 DB 업데이트 스크립트 생성 중..."
          
          # VM 정보를 DB에 저장하는 스크립트 생성
          cat > /tmp/vm-info/update_db.py << EOF
          #!/usr/bin/env python3
          import os
          import json
          import glob
          import subprocess
          import datetime
          
          def get_workspace_id():
              """회사 워크스페이스 ID 조회"""
              cmd = [
                  'psql', '-h', '192.168.60.64', '-p', '5432', '-U', 'postgres', 
                  '-d', 'solmakasedb', '-t', '-c', 
                  "SELECT id FROM companywworkspace LIMIT 1;"
              ]
              result = subprocess.run(cmd, capture_output=True, text=True, env=dict(os.environ, PGPASSWORD='soldesk1.'))
              return result.stdout.strip() or '1'  # 기본값 1
          
          def save_vm_info(vm_data, workspace_id):
              """VM 정보를 DB에 저장"""
              hostname = vm_data['hostname']
              
              # 기존 VM 확인
              check_sql = f"SELECT id FROM vm WHERE name = '{hostname}'"
              cmd = [
                  'psql', '-h', '192.168.60.64', '-p', '5432', '-U', 'postgres', 
                  '-d', 'solmakasedb', '-t', '-c', check_sql
              ]
              result = subprocess.run(cmd, capture_output=True, text=True, env=dict(os.environ, PGPASSWORD='soldesk1.'))
              vm_id = result.stdout.strip()
              
              now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              
              if vm_id:
                  # VM 업데이트
                  update_sql = f"""
                  UPDATE vm SET 
                      os_type = '{vm_data['os_type']}',
                      cpu_cores = {vm_data['cpu_cores']},
                      memory_gb = {vm_data['memory_gb']},
                      storage_gb = {vm_data['storage_gb']},
                      status = '{vm_data['status']}',
                      total_usage_hrs = total_usage_hrs + 1
                  WHERE id = {vm_id}
                  """
                  cmd = [
                      'psql', '-h', '192.168.60.64', '-p', '5432', '-U', 'postgres', 
                      '-d', 'solmakasedb', '-c', update_sql
                  ]
                  subprocess.run(cmd, env=dict(os.environ, PGPASSWORD='soldesk1.'))
                  print(f"✅ VM '{hostname}' 정보가 업데이트되었습니다.")
              else:
                  # 새 VM 추가
                  insert_sql = f"""
                  INSERT INTO vm (
                      name, os_type, cpu_cores, memory_gb, storage_gb, 
                      status, total_usage_hrs, created_at, company_workspace_id
                  ) VALUES (
                      '{hostname}', '{vm_data['os_type']}', {vm_data['cpu_cores']}, 
                      {vm_data['memory_gb']}, {vm_data['storage_gb']}, '{vm_data['status']}', 
                      0, '{now}', {workspace_id}
                  ) RETURNING id
                  """
                  cmd = [
                      'psql', '-h', '192.168.60.64', '-p', '5432', '-U', 'postgres', 
                      '-d', 'solmakasedb', '-t', '-c', insert_sql
                  ]
                  result = subprocess.run(cmd, capture_output=True, text=True, env=dict(os.environ, PGPASSWORD='soldesk1.'))
                  new_vm_id = result.stdout.strip()
                  
                  # VM 네트워크 정보 추가
                  if new_vm_id:
                      network_sql = f"""
                      INSERT INTO vm_network (vm_id, ip_address, network_type)
                      VALUES ({new_vm_id}, '{vm_data['ip_address']}', 'internal')
                      """
                      cmd = [
                          'psql', '-h', '192.168.60.64', '-p', '5432', '-U', 'postgres', 
                          '-d', 'solmakasedb', '-c', network_sql
                      ]
                      subprocess.run(cmd, env=dict(os.environ, PGPASSWORD='qaz123'))
                      print(f"✅ 새 VM '{hostname}' 및 네트워크 정보가 추가되었습니다.")
          
          # 메인 실행
          workspace_id = get_workspace_id()
          vm_files = glob.glob('/tmp/vm-info/*.json')
          
          for vm_file in vm_files:
              with open(vm_file, 'r') as f:
                  try:
                      vm_data = json.load(f)
                      save_vm_info(vm_data, workspace_id)
                  except json.JSONDecodeError:
                      print(f"❌ 오류: {vm_file} 파일을 파싱할 수 없습니다.")
                  except Exception as e:
                      print(f"❌ 오류 발생: {str(e)}")
          
          print("✅ 모든 VM 정보 처리 완료")
          EOF
          
          chmod +x /tmp/vm-info/update_db.py

      - name: Execute Ansible Deployment Script
        run: |
          echo "🚀 배포 스크립트 실행 중..."
          
          # 스크립트 실행 권한 설정 및 실행
          sshpass -p "${{ env.AWX_PASSWORD }}" ssh -o StrictHostKeyChecking=no awx@${{ env.ANSIBLE_MASTER }} "chmod +x /tmp/ansible-files/scripts/deploy.sh && cd /tmp/ansible-files && ./scripts/deploy.sh"
          
          DEPLOYMENT_STATUS=$?
          if [ $DEPLOYMENT_STATUS -eq 0 ]; then
            echo "✅ 애플리케이션 배포에 성공했습니다!"
          else
            echo "❌ 배포에 실패했습니다. 상태 코드: $DEPLOYMENT_STATUS"
            exit $DEPLOYMENT_STATUS
          fi

      - name: Run VM Info Collection Playbook
        run: |
          echo "🔍 VM 정보 수집 플레이북 실행 중..."
          
          # VM 정보 수집 플레이북 실행
          sshpass -p "${{ env.AWX_PASSWORD }}" ssh -o StrictHostKeyChecking=no awx@${{ env.ANSIBLE_MASTER }} "ansible-playbook -i /tmp/ansible-files/inventory/hosts /tmp/vm
